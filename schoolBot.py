import sqlite3
import datetime as DT

import telebot

token = 'your token'
admins_id_list = ['admin id']
log_path = './'
bot = telebot.TeleBot(token)
markup = telebot.types.ReplyKeyboardMarkup()
subjectsList = ['–†—É—Å—Å–∫–∏–π', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–ò—Å—Ç–æ—Ä–∏—è',
				'–û–±—â–∞–≥–∞', '–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
				'–ò–ö–¢', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–û–ë–ñ', '–≠–∫–æ–Ω–æ–º–∏–∫–∞']
weekdayDict = {0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞', 3: '—á–µ—Ç–≤–µ—Ä–≥', 4: '–ø—è—Ç–Ω–∏—Ü–æ', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}

customMessages = [[['‚ù§', 'üíô'],'send a ‚ù§','–ò —è —Ç–µ–±—è ‚ù§'],
				  [['))'],'—É–ª—ã–±–Ω—É–ª—Å—è –º–Ω–µ','))0)'],
				  [['–ø—Ä–µ–¥–º–µ—Ç'],'send a "–ü—Ä–µ–¥–º–µ—Ç" message','–ü—Ä–µ–¥–º–µ—Ç - –Ω–µ –ø—Ä–µ–¥–º–µ—Ç'],
				  [['–º–æ–∂–µ—à—å'],'–Ω–∞ —Å–ª–∞–±–æ –º–µ–Ω—è –≤–∑—è–ª','–Ø –≤—Å—ë –º–æ–≥—É!\U0001F64C'],
				  [['–ª–∞—Ä–∏–Ω'],'–õ–∞—Ä–∏–Ω–∞ –≤—Å–ø–æ–º–Ω–∏–ª','\U0001F414 —ç—Ç–æ –æ–Ω?'],
				  [['–∏–ª—å—è'],'—Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –∏–º—è –≥–æ—Å–ø–æ–¥–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞–ª–∏','–° –ë–û–õ–¨–®–û–ô –ë–£–ö–í–´ –ò–ú–Ø –ì–û–°–ü–û–î–ò–ù–ê'],
				  [['–¥–º–∏—Ç—Ä–∏–π', '–ø–∞–≤–ª–æ–≤–∏—á', '–¥–ø'],'–≤—Å–ø–æ–º–Ω–∏–ª –î–ü','–Ø –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—é —ç—Ç–æ –∑–¥–µ—Å—å\nrussianfood.com/recipes/bytype/?fid=963'],
				  [['–º–∞—Ä–∞—Ç'],'–≤—Å–ø–æ–º–Ω–∏–ª –ú–∞—Ä–∞—Ç–∏–∫–∞','–Ø –ø–æ–º–Ω—é –ú–∞—Ä–∞—Ç–∞. –ó–Ω–∞–∫–æ–º —Å –Ω–∏–º, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å. –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É –º–µ–Ω—è –≤ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–∞—Ö –≤–æ–∑–Ω–∏–∫–∞—é—Ç —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:\n\n  –Ø –ø–æ–º–Ω—é —á—É–¥–Ω–æ–µ –º–≥–Ω–æ–≤–µ–Ω—å–µ:\n–ü–µ—Ä–µ–¥–æ –º–Ω–æ–π —è–≤–∏–ª—Å—è —Ç—ã,\n–ö–∞–∫ –º–∏–º–æ–ª–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–Ω—å–µ,\n–ö–∞–∫ –≥–µ–Ω–∏–π —á–∏—Å—Ç–æ–π –∫—Ä–∞—Å–æ—Ç—ã.\n\n  –í —Ç–æ–º–ª–µ–Ω—å—è—Ö –≥—Ä—É—Å—Ç–∏ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ–π\n–í —Ç—Ä–µ–≤–æ–≥–∞—Ö —à—É–º–Ω–æ–π —Å—É–µ—Ç—ã,\n–ó–≤—É—á–∞–ª –º–Ω–µ –¥–æ–ª–≥–æ –≥–æ–ª–æ—Å –Ω–µ–∂–Ω—ã–π\n–ò —Å–Ω–∏–ª–∏—Å—å –º–∏–ª—ã–µ —á–µ—Ä—Ç—ã.\n\n–ï–≥–æ —á–µ—Ä—Ç—ã...\U0001F60D'],
				  [['–ª–∞–ø–æ—á–∫–∞'],'—Ñ–æ—Ä–µ–≤–µ—Ä —ç–ª–æ–Ω','–õ—é–±–ª—é —Ç–µ–±—è,–∑–∞–π–∫–∞'] ]

customStickerMessages = [['—Ö–æ–≤–∞','—Ö–æ–≤–∞–Ω—Å–∫–æ–≥–æ –≤—Å–ø–æ–º–Ω–∏–ª','','greben'],
						 ['–ø—Ä–∏–≤','–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –º–µ–Ω—è','–ø—Ä–∏–≤–µ—Ç–∏–∫!\U0001F44B','oHello'],
						 ['–æ–∫—Å','–ö—Å—é—Ö—É –≤—Å–ø–æ–º–Ω–∏–ª','','oO'],
						 ['–∫–∞–∫ –¥–µ–ª–∞','—Å–ø—Ä–æ—Å–∏–ª –º–µ–Ω—è "–∫–∞–∫ –¥–µ–ª–∞". –†—É–∫–∞–ª–∏—Ü–æ','–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ?! –¢—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å —É –±–æ—Ç–∞, –∫–∞–∫ —É –Ω–µ–≥–æ –¥–µ–ª–∞?!','oShock'],
						 [' –¥–µ–ª–∞?','—Å–ø—Ä–æ—Å–∏–ª –º–µ–Ω—è "–∫–∞–∫ –¥–µ–ª–∞". –†—É–∫–∞–ª–∏—Ü–æ','–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ?! –¢—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å —É –±–æ—Ç–∞, –∫–∞–∫ —É –Ω–µ–≥–æ –¥–µ–ª–∞?!','oShock'],
						 ['—á—Ç–æ –¥–µ–ª–∞–µ—à','—Å–ø—Ä–æ—Å–∏–ª –º–µ–Ω—è "–∫–∞–∫ –¥–µ–ª–∞". –†—É–∫–∞–ª–∏—Ü–æ','–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ?! –¢—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å —É –±–æ—Ç–∞, –∫–∞–∫ —É –Ω–µ–≥–æ –¥–µ–ª–∞?!','oShock']]

one = '\U00000031\U000020E3'
two = '\U00000032\U000020E3'
three = '\U00000033\U000020E3'
four = '\U00000034\U000020E3'
five = '\U00000035\U000020E3'
six = '\U00000036\U000020E3'
seven = '\U00000037\U000020E3'
eight = '\U00000038\U000020E3'
point = '\U000025AA'
# –°–æ–±—ã—Ç–∏—è
# –î–µ–∂—É—Ä—Å—Ç–≤–∞
# –ö–æ–Ω—Å–ø–µ–∫—Ç—ã
# –°–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ—Ä–µ–º—É–≤

markup.row('–ß–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?')
markup.row('–†—É—Å—Å–∫–∏–π', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
markup.row('–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è')
markup.row('–ò—Å—Ç–æ—Ä–∏—è', '–û–±—â–∞–≥–∞')
markup.row('–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è')
markup.row('–ë–∏–æ–ª–æ–≥–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è')
markup.row('–û–ë–ñ', '–≠–∫–æ–Ω–æ–º–∏–∫–∞')


def logger(log_message, operation):
	with open(log_path + 'log.txt', 'a') as log:
		now = str(DT.datetime.now())[0:19]
		log.write(now + ' - ' + log_message.from_user.first_name + ' - ' + operation + '\n')


def tomorrowDate():
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç yyyy-mm-dd
	today = DT.date.today()
	tomorrow = str(today + DT.timedelta(days=1))
	return tomorrow


def end(date):
	# –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–¥–µ–∂–∞
	# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–º-–¥–¥ (01-15, 02-01, 02-4)
	date = date.split('-')
	if date[1][0] == '0':	# –ï—Å–ª–∏ 0 –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º –º–µ—Å—è—Ü–∞
		date[1][0] == ''
	if date[0] in ['1', '01']:
		mounth = '—è–Ω–≤–∞—Ä—è'
	elif date[0] in ['2', '02']:
		mounth = '—Ñ–µ–≤—Ä–∞–ª—è'
	if date[1] in ['2', '02']:	# –ö–û 2–æ–º—É —á–∏—Å–ª—É. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
		date[1] = '2'
		pred = '–∫–æ'
	elif date[1][0] == '0':
		date[1] = date[1][1]
		pred = '–∫'
	else:
		pred = '–∫'
	return pred + ' ' + date[1] + '–º—É ' + mounth


def tomorrowHomework(message):
	if defineWeekdyByDate(tomorrowDate()) == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':	# –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
		bot.send_message(message.chat.id, '–ó–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –¢—ã —á–µ–≥–æ, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–∑ –≤ —Å—É–±–±–æ—Ç—É?! –û—Ç–ª–∏—á–Ω–∏–∫ —á—Ç–æ –ª–∏?!')
		return 1

	conn = sqlite3.connect('./subjects.db')
	cursor = conn.cursor()
	cursor.execute('SELECT * FROM subjects WHERE dateToExec=?', (tomorrowDate(), ))	# –ò–∑–≤–ª–µ—á—å –≤—Å–µ –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞
	row = cursor.fetchone()
	response = ''
	if row is None:	# –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –ø—É—Å—Ç–æ
		response = '–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ, –º–æ–∂–Ω–æ –∫–∞—Ç–∞—Ç—å –≤ –¥–æ—Ç–∫—É –≤–µ—Å—å –¥–µ–Ω—å'
	else:
		while row is not None:
			response += '%s %s - %s\n' % (point, row[0], row[3]) # –ü—Ä–µ–¥–º–µ—Ç - –¥–∑
			row = cursor.fetchone()
	bot.send_message(message.chat.id, response, reply_markup=None) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞
	cursor.close()
	conn.close()
	return 1


def currentSubject(message):
	conn = sqlite3.connect('./subjects.db')
	cursor = conn.cursor()
	cursor.execute('SELECT * FROM subjects WHERE SubjName=?', (message.text, )) # –í—ã–±–æ—Ä–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
	homework = cursor.fetchone()
	if homework[3] in ['–Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ', '–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ']:
		bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ –∑–∞–¥–∞–Ω–æ')
	else:
		bot.send_message(message.chat.id, '%s - –∑–∞–¥–∞–Ω–æ "%s" %s (%s)' % (message.text, homework[3], end(homework[2][6:]), homework[1]), reply_markup=None)
	cursor.close()
	conn.close()
	return 1


def defineWeekdyByDate(date):
	# –î–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å mm-dd –∏–ª–∏ yyyy-mm-dd
	if date[:4] == '2017':
		mm = date.split('-')[1]
		dd = date.split('-')[2]
	else:
		mm = date.split('-')[0]
		dd = date.split('-')[1]
	if dd[0] == '0':
		dd = dd[1]
	if mm[0] == '0':
		mm = mm[1]
	wd = DT.date(2017, int(mm), int(dd)).weekday() # –≤–µ—Ä–Ω—ë—Ç 0-6
	weekday = weekdayDict[int(wd)]	# –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
	return weekday


def customLowerMessageChecker(message):
	# phrases[0] - —à–∞–±–ª–æ–Ω—ã, phrases[1] - –ª–æ–≥–∏, phrases[2] - –æ—Ç–≤–µ—Ç—ã
	txt = message.text.lower()
	for phrases in customMessages:
		if len(phrases[0]) < 2:
			if phrases[0][0] in txt:
				logger(message, phrases[1])
				bot.send_message(message.chat.id, phrases[2], reply_markup=None)
				return 1
		else:
			for phrase in phrases[0]:
				if phrase in txt:
					logger(message, phrases[1])
					bot.send_message(message.chat.id, phrases[2], reply_markup=None)
					return 1
	logger(message, 'send a "%s"' % txt)
	return 1


def customStickerMessageChecker(message):
	for phrases in customStickerMessages:
		if phrases[0] in message.text.lower():
			logger(message, phrases[1])
			try:
				bot.send_message(message.chat.id, phrases[2], reply_markup=None)
			except:
				pass
			bot.send_sticker(message.chat.id, open('./stickers/'+phrases[3]+'.webp', 'rb'), reply_markup=None)
			return 1

@bot.message_handler(commands=['start'])
def start_message(message):
	bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, '+message.from_user.first_name+'!\U0001F604\n\n–ö–æ –º–Ω–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º!\n\n\U00002B07–í–Ω–∏–∑—É\U00002B07 –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –ø–æ–ª—É—á–∏—à—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥/–∑ –ø–æ –Ω–µ–º—É!\n\n–£–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /events\n–ü–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å –ø–æ–º–æ—â—å—é /info',
					reply_markup=markup)
	logger(message, 'start command')
	return 1


@bot.message_handler(commands=['info'])
def info_message(message):
	bot.send_message(message.chat.id, '–ú—ã —á–∞—Å—Ç–æ —Å–ª—ã—à–∏–º\n"–í–´ –ú–ï–ù–Ø –í–°–ï –ó–ê–ï\U0001F4A5\U0001F4A5–õ–ò\–°–ö–ê–ñ–ò –î–ó\n–°–ö–ò–ù–¨ –ö–û–ù–°–ü–ï–ö–¢–´\n–ê –ö–ê–ö –≠–¢–û –î–ï–õ–ê–¢–¨\n–î–ê–ô –°–ü–ò–°–ê–¢–¨\n–ü–û–ú–û–ì–ò\n–£ –ú–ï–ù–Ø –í–´–•–û–î–ù–û–ô",\n–≠—Ç–æ—Ç –±–æ—Ç - –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –û–Ω –æ—Ç–≤–µ—á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–∫—É–Ω–¥\U000023F0, –ø–æ—á—Ç–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –Ω–∏–∫–æ–≥–¥–∞ –≤–∞—Å –Ω–µ –ø–æ—à–ª—ë—Ç.\n\n–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ –±–æ—Ç—É:\n '+one+'—Ñ—Ä–∞–∑–∞1\n '+two+'—Ñ—Ä–∞–∑–∞2\n '+three+'—Ñ—Ä–∞–∑–∞3\n '+four+'—Ñ—Ä–∞–∑–∞ 4\n '+five+'—Ñ—Ä–∞–∑–∞5', reply_markup=None)
	logger(message, 'called info')
	return 1


@bot.message_handler(commands=['events'])
def events_message(message):
	conn = sqlite3.connect('./subjects.db')
	cursor = conn.cursor()
	cursor.execute('SELECT * FROM events')
	row = cursor.fetchone()
	response = ''
	while row is not None:
		date = [x for x in str(row[2]).split('-')]
		if date[2][0] == '0':	# –ï—Å–ª–∏ 0 –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º –º–µ—Å—è—Ü–∞
			date[2][0] == ''
		response += '%s %s - %se (%s)\n' % (point, row[0], date[2], row[1])
		row = cursor.fetchone()
	cursor.close()
	conn.close()
	bot.send_message(message.chat.id, response, reply_markup=None)


@bot.message_handler(commands=['addhomework'])
def addHomework(message):
	if message.from_user.id in admins_id_list:
		logger(message, 'succes logged as admin')
		# –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –û–∫—Å–∞–Ω—ã
		bot.send_message(message.chat.id, '–ü—Ä–µ–¥–º–µ—Ç - –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 16 —è–Ω–≤: 01-16) - –¥–∑', reply_markup=None)

		def validQuery(message):
			try:
				query = [x for x in str(message.text).split(' - ')]
				if (query[0] in subjectsList) and (len(query) == 3) and (len(query[1].split('-')) == 2) and (len(query[1]) in [4, 5]): # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
					weekday = defineWeekdyByDate(query[1])
					logger(message, 'succes query append - %s' % query)
				else:
					logger(message, 'unvalid query')
					raise Exception
			except:
				bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞', reply_markup=None)
				return 0

			conn = sqlite3.connect('./subjects.db')
			cursor = conn.cursor()
			cursor.execute('''UPDATE subjects
								SET weekDay=?,dateToExec=?,homework=?
								WHERE SubjName=?''', (weekday, str('2017-' + query[1]), query[2], query[0]))
			conn.commit()
			cursor.close()
			conn.close()
			bot.send_message(message.chat.id, '\U00002705–î–æ–±–∞–≤–ª–µ–Ω–æ\U00002705', reply_markup=None)
			logger(message, 'appended homework "%s"' % query[0])
			return 1

		bot.register_next_step_handler(message, validQuery)

	else:
		bot.send_message(message.chat.id, '–¢—ã –Ω–µ –∞–¥–º–∏–Ω, —Ç–≤–æ–∏ —Ä—É–∫–∏ –º–æ–≥—É—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –∫—Ä–∏–≤—ã–º–∏ –∏ —É–±–∏—Ç—å –±–æ—Ç–∞', reply_markup=None)
		logger(message, 'tried to add homework without permission')
	return 1


@bot.message_handler(content_types=['text'])
def SubjectResponse(message):
	if message.text in subjectsList:
		logger(message, 'called homework for "%s"' % message.text)
		currentSubject(message)

	elif message.text == '—á–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?' or '—á–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' in message.text.lower() or '–¥–∑' in message.text.lower():
		logger(message, 'called "–ß–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"')
		tomorrowHomework(message)

	elif message.text.lower() in '—è':
		logger(message, '–Ω–∞—Ä–∏—Ü—Å—Å —á—ë—Ä—Ç–æ–≤')
		bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞.', reply_markup=None)

	elif '–ò–ª—å—è' in message.text:
		logger(message, '—É–ø–æ–º–∏–Ω—É–ª–∏ –∏–º—è –º–æ—ë')
		bot.send_message(message.chat.id, '–ò–º—è –≥–æ—Å–ø–æ–¥–∏–Ω–∞ –Ω–∞—à–µ–≥–æ –∑–≤—É—á–∏—Ç –ø–æ–¥–æ–±–Ω–æ –º—É–∑—ã–∫–µ', reply_markup=None)

	else:
		customLowerMessageChecker(message)
		customStickerMessageChecker(message)

	return 1


@bot.message_handler(content_types=['audio'])
def audioResponse(message):
	logger(message, 'send an audio')
	bot.send_message(message.chat.id, '–ü–æ—Ç–æ–º –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Å–ª—É—à–∞—é)) (–Ω–µ—Ç)', reply_markup=None)


@bot.message_handler(content_types=['document'])
def documentResponse(message):
	logger(message, 'send a documet')
	bot.send_message(message.chat.id, '–ß—ë—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è', reply_markup=None)


@bot.message_handler(content_types=['photo'])
def photoResponse(message):
	logger(message, 'send a photo')
	bot.send_message(message.chat.id, '–õ–æ–ª', reply_markup=None)


@bot.message_handler(content_types=['sticker'])
def stickerResponse(message):
	logger(message, 'send a sticker')
	bot.send_message(message.chat.id, '–ö–ª—ë–≤—ã–π —Å—Ç–∏–∫–µ—Ä, –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±–µ', reply_markup=None)


@bot.message_handler(content_types=['location'])
def locationResponse(message):
	logger(message, 'send a location')
	bot.send_message(message.chat.id, '–í–æ—Ç —Ç—ã –≥–¥–µ! –ù—É –≤—Å—ë, –∑–∞ —Ç–æ–±–æ–π –≤—ã–µ—Ö–∞–ª–∏.', reply_markup=None)


@bot.message_handler(content_types=['voice'])
def voiceResponse(message):
	logger(message, 'send a voice')
	bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –≥–æ–ª–æ—Å, –∫–∞–∫ —É –º–∞–ª–µ–Ω—å–∫–æ–π –¥–µ–≤–æ—á–∫–∏.', reply_markup=None)

bot.polling(interval=3)
